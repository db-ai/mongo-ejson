grammar ExtendedJSON
  root                   <- @__ (object / array) @__
                          %make_root

  object                 <- (non_empty_object / empty_object)

  pair                   <- @__ (string / identifier) @assignment value
                          %make_pair

  non_empty_object       <- @object_open
                              pair (@delimiter pair)*
                            @object_close
                          %make_object

  empty_object           <- @object_open
                            @object_close
                          %make_empty_object

  array                  <- non_empty_array / empty_array

  non_empty_array        <- @array_open
                              value (@delimiter value)*
                            @array_close
                          %make_array

  empty_array            <- @array_open
                            @array_close
                          %make_empty_array

  value                  <- (json_values / mongo_literals / mongo_types)

  json_values            <- object / array / number / string / boolean / null
  mongo_literals         <- min_key / max_key / undefined / regexp_string
  mongo_types            <- object_id / bin_data / timestamp / number_long /
                            number_decimal / date / db_ref_type

  # Values
  boolean                <- (true / false)

  true                   <- "true"
                          %make_true

  false                  <- "false"
                          %make_false

  null                   <- "null"
                          %make_null

  string                 <- double_quote_string / single_quote_string

  identifier             <- (identifier_start identifier_part+)
                          %make_identifier

  identifier_start       <- unicode_letter / "$" / "_" / "\\" unicode_escape
  identifier_part        <- unicode_letter / unicode_digit / unicode_conn_punct

  # Not fully compatible with a https://www.ecma-international.org/ecma-262/5.1/#sec-7.6
  # but enough to cover most failing cases
  unicode_combining      <- unicode_non_spacing / unicode_comb_spacing

  unicode_escape         <- "u" hex_digit hex_digit hex_digit hex_digit

  unicode_letter         <- [a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]
  unicode_digit          <- [0-9]
  unicode_conn_punct     <- [_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F]

  double_quote_string    <- @double_quote
                              ("\\" . / [^"])*
                            @double_quote
                          %make_string

  single_quote_string    <- @single_quote
                              ("\\" . / [^'])*
                            @single_quote
                          %make_string

  hex_string             <- hex_single_quote / hex_double_quote
  hex_value              <- hex_digit+

  hex_single_quote       <- @single_quote
                              hex_value
                            @single_quote
                          %make_string

  hex_double_quote       <- @double_quote
                              hex_value
                            @double_quote
                          %make_string

  integer_string         <- integer_string_single / integer_string_double

  integer_string_single   <- @single_quote
                               integer_number
                             @single_quote
                          %make_numeric_string

  integer_string_double   <- @double_quote
                               integer_number
                             @double_quote
                          %make_numeric_string

  number_string          <- number_string_single / number_string_double

  number_string_single   <- @single_quote
                              number
                            @single_quote
                          %make_numeric_string

  number_string_double   <- @double_quote
                              number
                            @double_quote
                          %make_numeric_string

  regexp_string          <- @slash
                              ("\\" . / [^\/])*
                            @slash
                            regexp_options?
                          %make_regexp

  regexp_options         <- [gims]+

  base64_string          <- base64_single_quote / base64_dobule_quote

  base64_value           <- [a-zA-Z0-9+\/]+ ("=" / "==")?

  base64_single_quote    <- @single_quote
                              base64_value
                            @single_quote
                          %make_string

  base64_dobule_quote    <- @double_quote
                              base64_value
                            @double_quote
                          %make_string

  number                 <- "-"? integer fraction? exponent?
                          %make_number

  number_as_string       <- "-"? integer fraction? exponent?
                          %make_number_as_string

  integer                <- ("0" / [1-9] [0-9]*)
  fraction               <- ("." [0-9]+)
  exponent               <- (("e" / "E") ("+" / "-" / "") [0-9]+)

  integer_number         <- integer @""
                          %make_number

  # Mongo Extensions

  min_key                <- "MinKey"
                          %make_min_key

  max_key                <- "MaxKey"
                          %make_max_key

  undefined              <- "undefined"
                          %make_undefined

  object_id              <- @"ObjectId"
                            @type_open
                              hex_string
                            @type_close
                          %make_object_id

  bin_data_type          <- string / integer_number
  bin_data               <- @"BinData"
                            @type_open
                              bin_data_type
                            @delimiter
                              base64_string
                            @type_close
                          %make_bin_data

  timestamp              <- @"Timestamp"
                            @type_open
                              integer_number
                            @delimiter
                              integer_number
                            @type_close
                          %make_timestamp

  number_long_value      <- integer_number / integer_string
  number_long            <- @"NumberLong"
                            @type_open
                              number_long_value
                            @type_close
                          %make_number_long


  number_decimal_value   <- number_as_string / number_string
  number_decimal         <- @"NumberDecimal"
                            @type_open
                              number_decimal_value
                            @type_close
                          %make_number_decimal

  date_type              <- ("new" space+ "Date" / "ISODate")
  date_value             <- integer_number / string
  date                   <- @date_type
                            @type_open
                              date_value
                            @type_close
                          %make_date

  db_ref_type            <- @"DBRef"
                            @type_open
                              string
                            @delimiter
                              string
                            @type_close
                          %make_db_ref

  single_quote           <- "'"
  double_quote           <- '"'
  left_paren             <- '('
  right_paren            <- ')'
  left_brace             <- '{'
  right_brace            <- '}'
  left_bracket           <- '['
  right_bracket          <- ']'
  comma                  <- ','
  colon                  <- ':'
  slash                  <- '/'
  space                  <- [\s]
  new_line               <- [\n]

  hex_digit              <- [a-fA-F0-9]

  comment                <- "//" [^\n]*
  __                     <- (space / new_line / comment)*

  delimiter              <- @__ comma @__
  assignment             <- @__ @colon @__

  object_open            <- @__ @left_brace @__
  object_close           <- @__ @right_brace @__
  array_open             <- @__ @left_bracket @__
  array_close            <- @__ @right_bracket @__

  type_open              <- @space* @left_paren @space*
  type_close             <- @space* @right_paren
